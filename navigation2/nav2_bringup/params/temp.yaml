
bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom         # /odometry/local
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []

    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

controller_server:
  ros__parameters:
    use_sim_time: False
    verbose: False                ## added  
    cmd_vel_topic: /cmd_vel       ## added    
    controller_frequency: 20.0 # 25.0 # MPPI 10.0 #lmr 25.0    # original: 20.0 , model_dt 와 동시 변경 필요.
    costmap_update_timeout: 0.30
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001    # 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.1     # 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["precise_goal_checker"] # "precise_goal_checker"  general_goal_checker
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 20.0   # 10.0

    # Goal checker parameters
    precise_goal_checker:
     plugin: "nav2_controller::SimpleGoalChecker"
     xy_goal_tolerance: 0.18 # ros2 0.2    # lmr 0.03
     yaw_goal_tolerance: 0.05   # lmr 0.005
     stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25


    # # nav2_rpp
    FollowPath:
      plugin: "nav2_rotation_shim_controller::RotationShimController"
      primary_controller: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      # plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      angular_dist_threshold: 2.5 #lmr 0.3 rotationshim
      forward_sampling_distance: 0.5
      # rotate_to_heading_angular_vel: 0.9
      # max_angular_accel: 1.2
      simulate_ahead_time: 1.0
      # plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.5 # lmr0.55
      lookahead_dist: 0.45 # 0.5 # ros2 0.6 #0.7
      min_lookahead_dist: 0.2 #ros2 0.4
      max_lookahead_dist: 0.6 #ros2 1.1
      lookahead_time: 2.0 #2.5
     
      transform_tolerance: 0.05  # recommendations : 0.05
      use_velocity_scaled_lookahead_dist: true #false
      min_approach_linear_velocity: 0.01 # ros2 0.02  # recommendations : 0.02
      approach_velocity_scaling_dist: 0.6 # ros2 0.3 #default 0.6
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 1.5 # default 1.0
      use_regulated_linear_velocity_scaling: true # false
      use_cost_regulated_linear_velocity_scaling: false
      regulated_linear_scaling_min_radius: 0.5 # 0.9
      regulated_linear_scaling_min_speed: 0.25
      use_fixed_curvature_lookahead: true # lmr false
      curvature_lookahead_dist: 0.8 #0.9 #lmr 1.3 # default : 0.6
      use_rotate_to_heading: true #ros2 false #lmr true
      rotate_to_heading_angular_vel: 0.5 # 1.0 # lmr 0.7 # 0.5
      rotate_to_heading_min_angle: 1.0 # ros2 1.0 #0.5 # lmr0.2 #0.1
      max_angular_accel: 1.5 #6.0

      # max_robot_pose_search_dist: 10.0
      use_interpolation: true #false
      # deprecated?
      cost_scaling_dist: 0.7
      cost_scaling_gain: 1.0
      inflation_cost_scaling_factor: 3.0
      allowing_reverse: true



local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 20.0  #5.0
      publish_frequency: 2.0 # 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 8  # 3, need to check
      height: 8  # 3, need to check
      resolution: 0.05
      # robot_radius: 0.22
      footprint: "[[-0.35,0.12019],[-0.272,0.25], [0.272,0.25], [0.35,0.12019], [0.35, -0.12019], [0.272, -0.25], [-0.272, -0.25], [-0.35, -0.12019]]" #"[[-0.50,-0.29],[-0.50,0.29], [0.50,0.29], [0.50,-0.29]]"  #
      footprint_padding: 0.05
      inscribed_radius: 0.29  # inner
      circumscribed_radius: 0.55  #outer
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.5 #2.5
        inflation_radius: 0.5 # ros2 0.5  #0.70
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 4.5
          obstacle_min_range: 0.0
          # raytrace_max_range: 3.0
          # raytrace_min_range: 0.0
          # obstacle_max_range: 2.5
          # obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      ### need to check
      footprint: "[[-0.35,0.12019],[-0.272,0.25], [0.272,0.25], [0.35,0.12019], [0.35, -0.12019], [0.272, -0.25], [-0.272, -0.25], [-0.35, -0.12019]]" # "[[-0.50,-0.29],[-0.50,0.29], [0.50,0.29], [0.50,-0.29]]"
      footprint_padding: 0.05
      inscribed_radius: 0.29  # inner
      circumscribed_radius: 0.55  #outer
      # robot_radius: 0.22
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          ### need to check
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 4.5
          obstacle_min_range: 0.0
          # raytrace_max_range: 3.0
          # raytrace_min_range: 0.0
          # obstacle_max_range: 2.5
          # obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.5 # ros2 2.5
        inflation_radius: 0.5 # ros2 0.5 #0.7
      always_send_full_costmap: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
map_server:
  ros__parameters:
    yaml_filename: ""

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True


planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0 # 20.0  # 10.0
    planner_plugins: ["GridBased"]
    costmap_update_timeout: 1.0
    GridBased:
      plugin: "nav2_smac_planner::SmacPlannerHybrid"
      tolerance: 0.18 #0.2 # 0.05
      allow_unknown: true
      downsample_costmap: false
      downsampling_factor: 1
      angle_quantization_bins: 36 #ros2 72
      motion_model_for_search: "DUBIN"
      # motion_model_for_search: "REEDS_SHEPP"
      # minimum_turning_radius: 0.25
      reverse_penalty: 3.5 # ros2 2.5  # 후진 penalty
      # change_penalty: 0.05  # for DUBINS
      change_penalty: 3.0 # 2.0   # 전진 <-> 후진 전환 penalty
      non_straight_penalty: 3.5 # ros2 1.5 # 직선경로 선호
      minimum_turning_radius: 0.001 #ros2 0.4   ## added  협소공간 회전반경 고려
      cost_penalty: 1.0 # min 1.3 # ros2 4.5       # 값이 클수록 장애물 더 멀리 통로 중간에 회피 경로 생성
      rotation_penalty: 3.0
      analytic_expansion_ratio: 3.5
      analytic_expansion_max_length: 3.0
      lookup_table_size: 20.0
      allow_reverse_expansion: true
      max_planning_time: 3.0
      smooth_path: true # ros2 true
      smoother:
        max_iterations: 200
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10




### lmr annotation here
smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 1.0 #10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
      #### lmr, st: global_frame: odom
    local_frame: odom
    global_frame: map


    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 20   # lmr: 50
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0    # 200

velocity_smoother:
  ros__parameters:
    enabled: false      ## added
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 2.0]
    min_velocity: [-0.5, 0.0, -2.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    enabled: false              ## added
    base_frame_id: "base_link" #"base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.2
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      enabled: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True

docking_server:
  ros__parameters:
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_link"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15
      use_collision_detection: true
      costmap_topic: "/local_costmap/costmap_raw"
      footprint_topic: "/local_costmap/published_footprint"
      transform_tolerance: 0.1
      projection_time: 5.0
      simulation_step: 0.1
      dock_collision_threshold: 0.3

loopback_simulator:
  ros__parameters:
    base_frame_id: "base_link" #"base_footprint"
    odom_frame_id: "odom"
    map_frame_id: "map"
    scan_frame_id: "base_scan"  # tb4_loopback_simulator.launch.py remaps to 'rplidar_link'
    update_duration: 0.02
